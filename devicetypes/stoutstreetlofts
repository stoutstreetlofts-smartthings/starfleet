/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
 
private getCOLOR_TEMP_MIN() { 2700 }
private getCOLOR_TEMP_MAX() { 6500 }
private getWARM_WHITE() { "warmWhite" }
private getCOLD_WHITE() { "coldWhite" }
private getWHITE_NAMES() { [WARM_WHITE, COLD_WHITE] }
private getCOLOR_TEMP_DIFF() { COLOR_TEMP_MAX - COLOR_TEMP_MIN }
private getCURRENT_SWITCH_STATUS() { ["ON","OFF"] }
private getCURRENT_MODE_STATUS() { ["white","color","scene","scene 1"] }
private getCURRENT_COLOR ()
private getCURRENT_HUE ()
private getCURRENT_

metadata {

    definition (name: "Alexa Gennie RGBW Controller", namespace: "starfleet", author: "stoutstreetlofts-smartthings", vid:"alexacontrolled-rgbw-color-bulb") {
        capability "Color Control"
        capability "Color Temperature"
        capability "Switch"
        capability "Switch Level"
        capability "Sensor"
        capability "Actuator"
        capability "Refresh"
        capability "Contact Sensor"
        capability "Configuration"
        capability "Ping"
        capability "Health Check"
        capability "Light"
        
    }
    
    simulator {
		status "open": "contact:open"
		status "closed": "contact:closed"
	}

    tiles {
        standardTile("switch", "device.switch", width: 2, height: 2, canChangeIcon: true) {
            state "off", label: '${currentValue}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
            state "on", label: '${currentValue}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00A0DC"
        }
        main "switch"
        details(["switch"])
    }
}

def parse(description) {
}

def on() {
    sendEvent(name: "switch", value: "on")
    sendEvent(name: "contact", value: "open")
    sendEvent(name: "light", value: "on")
}

def off() {
    sendEvent(name: "switch", value: "off")
    sendEvent(name: "contact", value: "closed")
    sendEvent(name: "light", value: "off")
}
